df <- read.delim("clipboard")
df
library(stringr)
x <- str_remove_all(df$List.of.Links, "Slide")
x
df <- read.delim("clipboard")
library(stringr)
x <- df[, 1][str_detect(df$List.of.Links, "Slide")]
x
df <- read.delim("clipboard")
library(stringr)
x <- df[, 1][!str_detect(df$List.of.Links, "Slide")]
x
sub(".xlsx*", "", x)
sub("\.xlsx*", "", x)
sub("\\.xlsx*", "", x)
sub("\\..xlsx*", "", x)
sub("\\.!", "", x)
sub("\\.!*", "", x)
x <- df[, 1][!str_detect(df$List.of.Links, "Slide")]
sub(".!*", "", x)
str_extract(x, "^(.*!!)")
sub("(!<=\\!).*$", "", x)
sub("(!<=\\!).*$", "", x, perl = T)
getwd()
write.csv(data.frame(x), "x.csv")
write.csv(data.frame(x), "C:/Automation/x.csv")
taskscheduleR:::taskschedulerAddin()
Sys.time()
browseURL("google.com")
browseURL("https://www.google.com/webhp")
library(rmarkdown)
library(RCurl)
library(config)
Sys.setenv(RSTUDIO_PANDOC = "C:/Program Files/RStudio/bin/pandoc")
setwd("X:/Research/Economics/Economic/Dashboard/")
creds <- config::get("credentials", file = "keys.yml")$csm_wordpress
render(input = "main.Rmd",
output_file = "main.html")
ftpUpload(what = "main.html",
to = paste0("ftp://", creds$host, "/public/eco/eco dashboard/main.html"),
userpwd = paste0(creds$id, ":", creds$pw))
# browseURL("https://cornerstonemacro.com/eco/eco%20dashboard/main.html")
library(rmarkdown)
library(RCurl)
library(config)
Sys.setenv(RSTUDIO_PANDOC = "C:/Program Files/RStudio/bin/pandoc")
setwd("X:/Research/Economics/Economic/Dashboard/")
creds <- config::get("credentials", file = "keys.yml")$csm_wordpress
render(input = "main.Rmd",
output_file = "main.html")
ftpUpload(what = "main.html",
to = paste0("ftp://", creds$host, "/public/eco/eco dashboard/main.html"),
userpwd = paste0(creds$id, ":", creds$pw))
# browseURL("https://cornerstonemacro.com/eco/eco%20dashboard/main.html")
library(rmarkdown)
library(RCurl)
library(config)
Sys.setenv(RSTUDIO_PANDOC = "C:/Program Files/RStudio/bin/pandoc")
setwd("X:/Research/Economics/Economic/Dashboard/")
creds <- config::get("credentials", file = "keys.yml")$csm_wordpress
render(input = "main.Rmd",
output_file = "index.html")
fn_make_insightsPHP <- function(htmlfil) {
insights_php <- "insights.php"
conA <- file(insights_php)
partA <- paste(readLines(con = conA), collapse = "\n")
conB <- file(htmlfil)
partB <- paste(readLines(con = conB), collapse = "\n")
partC <- paste(partA, partB, sep = "\n")
writeLines(partC, gsub("\\.html$", ".php", htmlfil))
close(conB)
close(conA)
return(gsub("\\.html$", ".php", htmlfil))
}
fn_make_insightsPHP("index.html")
ftpUpload(what = "index.php",
to = paste0("ftp://", creds$host, "/public/economics/dashboard/index.php"),
userpwd = paste0(creds$id, ":", creds$pw))
rsconnect::deployApp()
rsconnect::deployApp()
library(rmarkdown)
library(RCurl)
library(config)
Sys.setenv(RSTUDIO_PANDOC = "C:/Program Files/RStudio/bin/pandoc")
setwd("X:/Research/Economics/Economic/Dashboard/")
creds <- config::get("credentials", file = "keys.yml")$csm_wordpress
render(input = "main.Rmd",
output_file = "index.html")
fn_make_insightsPHP <- function(htmlfil) {
insights_php <- "insights.php"
conA <- file(insights_php)
partA <- paste(readLines(con = conA), collapse = "\n")
conB <- file(htmlfil)
partB <- paste(readLines(con = conB), collapse = "\n")
partC <- paste(partA, partB, sep = "\n")
writeLines(partC, gsub("\\.html$", ".php", htmlfil))
close(conB)
close(conA)
return(gsub("\\.html$", ".php", htmlfil))
}
fn_make_insightsPHP("index.html")
ftpUpload(what = "index.php",
to = paste0("ftp://", creds$host, "/public/economics/dashboard/index.php"),
userpwd = paste0(creds$id, ":", creds$pw))
library(rmarkdown)
library(RCurl)
library(config)
Sys.setenv(RSTUDIO_PANDOC = "C:/Program Files/RStudio/bin/pandoc")
setwd("X:/Research/Economics/Economic/Dashboard/")
creds <- config::get("credentials", file = "keys.yml")$csm_wordpress
render(input = "main.Rmd",
output_file = "index.html")
fn_make_insightsPHP <- function(htmlfil) {
insights_php <- "insights.php"
conA <- file(insights_php)
partA <- paste(readLines(con = conA), collapse = "\n")
conB <- file(htmlfil)
partB <- paste(readLines(con = conB), collapse = "\n")
partC <- paste(partA, partB, sep = "\n")
writeLines(partC, gsub("\\.html$", ".php", htmlfil))
close(conB)
close(conA)
return(gsub("\\.html$", ".php", htmlfil))
}
fn_make_insightsPHP("index.html")
ftpUpload(what = "index.php",
to = paste0("ftp://", creds$host, "/public/economics/dashboard/index.php"),
userpwd = paste0(creds$id, ":", creds$pw))
library(FactoMineR)
library(forecast)
library(readxl)
library(tidyverse)
library(lubridate)
library(vars)
library(tidyquant)
select <- dplyr::select
VAR <- vars::VAR
sp100_tickers <- c("AAPL", "ABBV", "ABT", "ACN", "AGN", "AIG", "ALL", "AMGN", "AMZN", "AXP", "BA", "BAC", "BIIB", "BK",
"BLK", "BMY", "C", "CAT", "CELG", "CL", "CMCSA", "COF", "COP", "COST", "CSCO", "CVS", "CVX", "DD",
"DHR", "DIS", "DOW", "DUK", "EMC", "EMR", "EXC", "F", "FB", "FDX", "FOX", "FOXA", "GD", "GE", "GILD", "GM",
"GOOG", "GOOGL", "GS", "HAL", "HD", "HON", "IBM", "INTC", "JNJ", "JPM", "KMI", "KO", "LLY", "LMT", "LOW", "MA",
"MCD", "MDLZ", "MDT", "MET", "MMM", "MO", "MON", "MRK", "MS", "MSFT", "NEE", "NKE", "ORCL", "OXY", "PCLN", "PEP",
"PFE", "PG", "PM", "PYPL", "QCOM", "RTN", "SBUX", "SLB", "SO", "SPG", "T", "TGT", "TWX", "TXN", "UNH", "UNP", "UPS",
"USB", "USD", "UTX", "V", "VZ", "WBA", "WFC")
dat <- tq_get(sp100_tickers, get = "stock.prices", periodicity = "monthly", from = "2010-01-01")
nas_col <- apply(df, 2, function(x) sum(is.na(x)))
df <- dat %>%
select(date, symbol, adjusted) %>%
distinct() %>%
pivot_wider(values_from = adjusted, names_from = symbol)
dat <- tq_get(sp100_tickers, get = "stock.prices", periodicity = "monthly", from = "2010-01-01")
df <- dat %>%
select(date, symbol, adjusted) %>%
distinct() %>%
pivot_wider(values_from = adjusted, names_from = symbol)
library(FactoMineR)
library(forecast)
library(readxl)
library(tidyverse)
library(lubridate)
library(vars)
library(tidyquant)
select <- dplyr::select
VAR <- vars::VAR
sp100_tickers <- c("AAPL", "ABBV", "ABT", "ACN", "AGN", "AIG", "ALL", "AMGN", "AMZN", "AXP", "BA", "BAC", "BIIB", "BK",
"BLK", "BMY", "C", "CAT", "CELG", "CL", "CMCSA", "COF", "COP", "COST", "CSCO", "CVS", "CVX", "DD",
"DHR", "DIS", "DOW", "DUK", "EMC", "EMR", "EXC", "F", "FB", "FDX", "FOX", "FOXA", "GD", "GE", "GILD", "GM",
"GOOG", "GOOGL", "GS", "HAL", "HD", "HON", "IBM", "INTC", "JNJ", "JPM", "KMI", "KO", "LLY", "LMT", "LOW", "MA",
"MCD", "MDLZ", "MDT", "MET", "MMM", "MO", "MON", "MRK", "MS", "MSFT", "NEE", "NKE", "ORCL", "OXY", "PCLN", "PEP",
"PFE", "PG", "PM", "PYPL", "QCOM", "RTN", "SBUX", "SLB", "SO", "SPG", "T", "TGT", "TWX", "TXN", "UNH", "UNP", "UPS",
"USB", "USD", "UTX", "V", "VZ", "WBA", "WFC")
dat <- tq_get(sp100_tickers, get = "stock.prices", from = "2018-01-01")
df <- dat %>%
select(date, symbol, adjusted) %>%
distinct() %>%
pivot_wider(values_from = adjusted, names_from = symbol)
nas_col <- apply(df, 2, function(x) sum(is.na(x)))
df <- df[, nas_col == 0]
Y <- df %>% select(-date)
my_diff <- function(x) {
if(ndiffs(x) == 0) {
out <- x
} else {
out <- c(rep(NA, ndiffs(x)), diff(x, ndiffs(x)))
}
return(out)
}
df_differences <- df %>%
select(-V) %>%
mutate_if(is.numeric, my_diff) %>%
na.omit() %>%
select(-date)
pca <- PCA(df_differences)
summary(pca)
X <- cbind.data.frame(V = tail(Y[["V"]], nrow(pca$ind$coord)), pca$ind$coord[, c(1:4)])
VARselect(X, lag.max = 12)
p_sel <- VARselect(X)$selection[2]
r <- VAR(ts(X, start = c(2010, 3), freq = 12), p_sel)
r <- VAR(ts(X), p_sel)
summary(r$varresult[[1]])
BIC(r$varresult$V)
X <- cbind.data.frame(V = tail(Y[["V"]], nrow(pca$ind$coord)), pca$ind$coord[, c(1:2)])
library(rmarkdown)
library(RCurl)
library(config)
Sys.setenv(RSTUDIO_PANDOC = "C:/Program Files/RStudio/bin/pandoc")
setwd("X:/Research/Economics/Economic/Dashboard/")
creds <- config::get("credentials", file = "keys.yml")$csm_wordpress
render(input = "main.Rmd",
output_file = "index.html")
fn_make_insightsPHP <- function(htmlfil) {
insights_php <- "insights.php"
conA <- file(insights_php)
partA <- paste(readLines(con = conA), collapse = "\n")
conB <- file(htmlfil)
partB <- paste(readLines(con = conB), collapse = "\n")
partC <- paste(partA, partB, sep = "\n")
writeLines(partC, gsub("\\.html$", ".php", htmlfil))
close(conB)
close(conA)
return(gsub("\\.html$", ".php", htmlfil))
}
fn_make_insightsPHP("index.html")
ftpUpload(what = "index.php",
to = paste0("ftp://", creds$host, "/public/economics/dashboard/index.php"),
userpwd = paste0(creds$id, ":", creds$pw))
require(quantmod)
require(PerformanceAnalytics)
out <- c()
idx <- seq(6, 50, 2)
for(i in idx) {
# Step 1: Get the data
getSymbols("JETS")
# Step 2: Create your indicator
ema <- EMA(Cl(JETS), i)
# Step 3: Construct your trading rule
sig <- Lag(ifelse(ema > Cl(JETS), 1, 0))
# Step 4: The trading rules/equity
ret <- Delt(Cl(JETS), k = 1) * sig
ret <- ret["2016-01-01/"]
eq <- 1 * cumprod(1 + ret)
# plot(eq)
# Step 5: Calculate strategy performance
# table.Drawdowns(ret, top = 10)
# table.DownsideRisk(ret)
# charts.PerformanceSummary(ret)
out[i] <- tail(eq, 1)
}
df <- data.frame(EMA = idx, Return = na.omit(out))
plot(Return ~ EMA, data = df, type = "o"); abline(v = df$EMA[which.max(df$Return)], col = 2, lty = 2)
require(quantmod)
require(PerformanceAnalytics)
out <- c()
idx <- seq(6, 100, 2)
for(i in idx) {
# Step 1: Get the data
getSymbols("JETS")
# Step 2: Create your indicator
ema <- EMA(Cl(JETS), i)
# Step 3: Construct your trading rule
sig <- Lag(ifelse(ema > Cl(JETS), 1, 0))
# Step 4: The trading rules/equity
ret <- Delt(Cl(JETS), k = 1) * sig
ret <- ret["2016-01-01/"]
eq <- 1 * cumprod(1 + ret)
# plot(eq)
# Step 5: Calculate strategy performance
# table.Drawdowns(ret, top = 10)
# table.DownsideRisk(ret)
# charts.PerformanceSummary(ret)
out[i] <- tail(eq, 1)
}
df <- data.frame(EMA = idx, Return = na.omit(out))
plot(Return ~ EMA, data = df, type = "o"); abline(v = df$EMA[which.max(df$Return)], col = 2, lty = 2)
require(quantmod)
require(PerformanceAnalytics)
out <- c()
idx <- seq(6, 100, 2)
for(i in idx) {
# Step 1: Get the data
getSymbols("JETS")
# Step 2: Create your indicator
ema <- EMA(Cl(JETS), i)
# Step 3: Construct your trading rule
sig <- Lag(ifelse(ema < Cl(JETS), 1, 0))
# Step 4: The trading rules/equity
ret <- Delt(Cl(JETS), k = 1) * sig
ret <- ret["2016-01-01/"]
eq <- 1 * cumprod(1 + ret)
# plot(eq)
# Step 5: Calculate strategy performance
# table.Drawdowns(ret, top = 10)
# table.DownsideRisk(ret)
# charts.PerformanceSummary(ret)
out[i] <- tail(eq, 1)
}
df <- data.frame(EMA = idx, Return = na.omit(out))
plot(Return ~ EMA, data = df, type = "o"); abline(v = df$EMA[which.max(df$Return)], col = 2, lty = 2)
require(quantmod)
require(PerformanceAnalytics)
out <- c()
idx <- seq(6, 30, 2)
for(i in idx) {
# Step 1: Get the data
getSymbols("JETS")
# Step 2: Create your indicator
ema <- EMA(Cl(JETS), i)
# Step 3: Construct your trading rule
sig <- Lag(ifelse(ema < Cl(JETS), 1, 0))
# Step 4: The trading rules/equity
ret <- Delt(Cl(JETS), k = 1) * sig
ret <- ret["2016-01-01/"]
eq <- 1 * cumprod(1 + ret)
# plot(eq)
# Step 5: Calculate strategy performance
# table.Drawdowns(ret, top = 10)
# table.DownsideRisk(ret)
# charts.PerformanceSummary(ret)
out[i] <- tail(eq, 1)
}
df <- data.frame(EMA = idx, Return = na.omit(out))
plot(Return ~ EMA, data = df, type = "o"); abline(v = df$EMA[which.max(df$Return)], col = 2, lty = 2)
sig
i <- 12
# Step 1: Get the data
getSymbols("JETS")
# Step 2: Create your indicator
ema <- EMA(Cl(JETS), i)
# Step 3: Construct your trading rule
sig <- Lag(ifelse(ema < Cl(JETS), 1, 0))
# Step 4: The trading rules/equity
ret <- Delt(Cl(JETS), k = 1) * sig
ret <- ret["2016-01-01/"]
eq <- 1 * cumprod(1 + ret)
out[i] <- tail(eq, 1)
eq
tail(sig, 10)
require(quantmod)
require(PerformanceAnalytics)
out <- c()
idx <- seq(6, 30, 2)
for(i in idx) {
# Step 1: Get the data
getSymbols("ABBV")
# Step 2: Create your indicator
ema <- EMA(Cl(ABBV), i)
# Step 3: Construct your trading rule
sig <- Lag(ifelse(ema < Cl(ABBV), 1, 0))
# Step 4: The trading rules/equity
ret <- Delt(Cl(ABBV), k = 1) * sig
ret <- ret["2016-01-01/"]
eq <- 1 * cumprod(1 + ret)
# plot(eq)
# Step 5: Calculate strategy performance
# table.Drawdowns(ret, top = 10)
# table.DownsideRisk(ret)
# charts.PerformanceSummary(ret)
out[i] <- tail(eq, 1)
}
df <- data.frame(EMA = idx, Return = na.omit(out))
plot(Return ~ EMA, data = df, type = "o"); abline(v = df$EMA[which.max(df$Return)], col = 2, lty = 2)
require(quantmod)
require(PerformanceAnalytics)
out <- c()
idx <- seq(6, 30, 2)
for(i in idx) {
# Step 1: Get the data
getSymbols("ABBV")
# Step 2: Create your indicator
ema <- EMA(Cl(ABBV), i)
# Step 3: Construct your trading rule
sig <- Lag(ifelse(ema > Cl(ABBV), 1, 0))
# Step 4: The trading rules/equity
ret <- Delt(Cl(ABBV), k = 1) * sig
ret <- ret["2016-01-01/"]
eq <- 1 * cumprod(1 + ret)
# plot(eq)
# Step 5: Calculate strategy performance
# table.Drawdowns(ret, top = 10)
# table.DownsideRisk(ret)
# charts.PerformanceSummary(ret)
out[i] <- tail(eq, 1)
}
df <- data.frame(EMA = idx, Return = na.omit(out))
plot(Return ~ EMA, data = df, type = "o"); abline(v = df$EMA[which.max(df$Return)], col = 2, lty = 2)
my_data <- readr::read_csv("https://files.stlouisfed.org/files/htdocs/fred-md/monthly/current.csv") %>%
slice(-1)
get_fred_md <- function() {
my_data <- readr::read_csv("https://files.stlouisfed.org/files/htdocs/fred-md/monthly/current.csv")
out <- dplyr::slice(my_data, -1)
return(out)
}
get_fred_md()
get_fred_md <- function() {
my_data <- readr::read_csv("https://files.stlouisfed.org/files/htdocs/fred-md/monthly/current.csv")
out <- dplyr::slice(my_data, -1)
out <- dplyr::mutate(my_data, sasdate = mdy(sasdate))
return(out)
}
get_fred_md()
get_fred_md <- function() {
my_data <- readr::read_csv("https://files.stlouisfed.org/files/htdocs/fred-md/monthly/current.csv")
out <- dplyr::slice(my_data, -1)
out <- dplyr::mutate(my_data, sasdate = lubridate::mdy(sasdate))
return(out)
}
get_fred_md()
get_fred_md <- function() {
my_data <- readr::read_csv("https://files.stlouisfed.org/files/htdocs/fred-md/monthly/current.csv")
out <- dplyr::slice(my_data, -1)
out <- dplyr::mutate(out, sasdate = lubridate::mdy(sasdate))
return(out)
}
get_fred_md <- function() {
my_data <- readr::read_csv("https://files.stlouisfed.org/files/htdocs/fred-md/monthly/current.csv")
my_data <- dplyr::slice(my_data, -1)
out <- dplyr::mutate(my_data, sasdate = lubridate::mdy(sasdate))
return(out)
}
get_fred_md()
fred_md_dictionary <- function() {
browseURL("https://research.stlouisfed.org/wp/more/2015-012")
}
fred_md_dictionary()
fred_md_site <- function() {
browseURL("https://research.stlouisfed.org/econ/mccracken/fred-databases/")
}
fred_md_site
fred_md_site()
###################
# Get FRED Data
###################
#' Get Fred-MD Data
#'
#' This function returns the current FRED-MD dataset.
#'
#' @return A tibble object
#' @export
get_fred_md <- function() {
my_data <- readr::read_csv("https://files.stlouisfed.org/files/htdocs/fred-md/monthly/current.csv")
my_data <- dplyr::slice(my_data, -1)
out <- dplyr::mutate(my_data, sasdate = lubridate::mdy(sasdate))
return(out)
}
#' Get Fred-QD Data
#'
#' This function returns the current FRED-QD dataset.
#'
#' @return A tibble object
#' @export
get_fred_qd <- function() {
my_data <- readr::read_csv("https://files.stlouisfed.org/files/htdocs/fred-md/quarterly/current.csv")
my_data <- dplyr::slice(my_data, -c(1:2))
out <- dplyr::mutate(my_data, sasdate = lubridate::mdy(sasdate))
return(out)
}
#' Go To FRED-MD/FRED-QD Website
#'
#' This function opens the website with latest versions, codes, and documentation.
#'
#' @return Website in default browser
#' @export
fred_md_site <- function() {
browseURL("https://research.stlouisfed.org/econ/mccracken/fred-databases/")
}
setwd("X:\\Research\\Economics\\Economic\\VBA\\R Package\\csm")
devtools::document()
rm(list = ls())
devtools::document()
